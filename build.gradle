import java.util.regex.Matcher

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

plugins {
  id "java"
  id "java-library"
  id "application"
  id "nebula.ospackage-application" version "8.3.0"
  id "idea"
}
idea.module.outputDir file("out/production/classes")

group = 'org.swimos'
description = 'swim azure iot module'
sourceCompatibility = 1.9
version = project.property('application.version')
mainClassName = 'swim.iot.SwimPlane'
ext.moduleName = 'swim.iot'

// Build with `gradle -Pno-modules` to force compatibility with legacy JVMs.
def jvmVersion = 9 //System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = jvmVersion >= 9 && !project.hasProperty('no-modules')

repositories {
  mavenCentral()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  maven { url 'https://packages.confluent.io/maven/' }
}

dependencies {
  api group: 'org.swimos', name: 'swim-api', version:version
  implementation group: 'org.swimos', name: 'swim-server', version: version
  implementation group: 'org.swimos', name: 'swim-client', version: version

  // https://mvnrepository.com/artifact/com.azure/azure-messaging-eventhubs
  implementation group: 'com.azure', name: 'azure-messaging-eventhubs', version: '5.6.0'

}

afterEvaluate {
  compileJava {
    if (useModules) {
      doFirst {
        options.compilerArgs += [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
      }
    }
    options.compilerArgs += ['-Xlint:-deprecation']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
        'Implementation-Title': moduleName,
        'Implementation-Version': version,
        'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (!useModules) {
      exclude '*module-info*'
    }
  }

  run {
    dependsOn jar
    doFirst {
      jvmArgs += [
        '--module-path', files(configurations.runtimeClasspath, jar.archivePath).asPath,
        '--module', "${moduleName}/${mainClassName}"
      ]
      classpath = files()
    }
  }

  startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
      classpath = files()
      defaultJvmOpts = [
              '-Dswim.config=/server.recon',
              '--module-path', 'APP_HOME_LIBS',
              '--module', "${moduleName}/${mainClassName}"
      ]
    }
    doLast {
      def bashFile = new File(outputDir, applicationName)
      String bashContent = bashFile.text
      bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

      def batFile = new File(outputDir, applicationName + ".bat")
      String batContent = batFile.text
      batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
  }

  ospackage {
    release '1'
    prefix '/opt/swim-system-metrics'
  }

  task packageDeb(type: Deb) {
    maintainer = 'developer@swim.ai'

    configurationFile("/etc/sysconfig/${project.name}")
    preInstall "addgroup --quiet --system ${project.name}"
    preInstall "adduser --quiet --system --ingroup ${project.name} --no-create-home --disabled-password ${project.name}"
    postInstall "systemctl preset ${project.name} > /dev/null 2>&1"
    postInstall "systemctl start ${project.name} > /dev/null 2>&1"
    preUninstall  "systemctl disable ${project.name} > /dev/null 2>&1"
    preUninstall  "systemctl stop ${project.name} > /dev/null 2>&1"
    postUninstall "systemctl daemon-reload > /dev/null 2>&1"

    from('pkg') {
      into '/etc/systemd/system'
      include '*.service'
      addParentDirs false
      expand project.properties
      user 'root'
      permissionGroup 'root'
      fileMode = 0644
    }

    from('pkg') {
      into '/etc/sysconfig'
      include "${project.name}"
      user 'root'
      permissionGroup 'root'
      fileMode = 0644
      fileType CONFIG | NOREPLACE
    }
  }
}
